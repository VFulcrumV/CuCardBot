import os
from typing import Optional
import disnake
from disnake.ext import commands
import random
from dateutil import parser
from random import choice
import sqlite3
import datetime


client = commands.Bot(command_prefix='!!', intents=disnake.Intents.all())
client.remove_command("help")

connection = sqlite3.connect('server.db')
cursor = connection.cursor()

work_incom = [
  1, 2, 3, 4, 5, 0, 1, 1, 2, 3,
]

common_cards = ["bucky_o_hare_1", "dune2000_1", "metroid_1", "prince_of_persia_1", "tempest_1"

]
uncommon_cards = ["contra_1", "defender_1", "elite_1", "maniac_mansion_1"

]
rare_cards = ["pitfall_1", "street_fighter_1", "tekken_1"
]
epic_cards = ["donkey_kong_1", "mega_man2_1", "zero_tolerance_1"

]
mythic_cards = ["pac_man_1", "the_legend_of_zelda_1"

]
legendary_cards = [
    "mortal_kombat_1", "super_mario_bros_1"
]
secret_cards = [
    "battle_city_1"
]
all_cards = ["bucky_o_hare_1", "dune2000_1", "metroid_1", "prince_of_persia_1", "tempest_1",
             "contra_1", "defender_1", "elite_1", "maniac_mansion_1", "pitfall_1", "street_fighter_1", "tekken_1",
             "donkey_kong_1", "mega_man2_1", "zero_tolerance_1", "pac_man_1", "the_legend_of_zelda_1",
             "mortal_kombat_1", "super_mario_bros_1", "battle_city_1"]
drop_list = [
    "common", "uncommon", "rare", "epic", "mythic", "legendary", "secret", "80 coins",
    "125 coins", "200 coins", "260 coins", "404 coins"
]



drop_chances = [0.500, 0.190, 0.120, 0.060, 0.025, 0.007, 0.003, 0.030, 0.020, 0.020, 0.015, 0.010]

card_costs = {"common_1": 25,
              "uncommon_1": 55,
              "rare_1": 80,
              "epic_1": 170,
              "mythic_1": 270,
              "legendary": 600,
              "secret": 1300}

time_limits_per_drop = {}


@client.event
async def on_ready():
    # cursor.execute("""DROP TABLE USERS""")
    cursor.execute("""CREATE TABLE IF NOT EXISTS users (
        name TEXT,
        id INT,
        cash BIGINT,
        mem_cards INT,
        mem_opened INT,
        common INT,
        uncommon INT,
        rare INT,
        epic INT,
        mythic INT,
        legendary INT,
        secret INT,
        bucky_o_hare_1 INT,
        dune2000_1 INT,
        metroid_1 INT,
        prince_of_persia_1 INT,
        tempest_1 INT,
        contra_1 INT,
        defender_1 INT,
        elite_1 INT,
        maniac_mansion_1 INT,
        pitfall_1 INT,
        street_fighter_1 INT,
        tekken_1 INT,
        donkey_kong_1 INT,
        mega_man2_1 INT,
        zero_tolerance_1 INT,
        pac_man_1 INT,
        the_legend_of_zelda_1 INT,
        mortal_kombat_1 INT,
        super_mario_bros_1 INT,
        battle_city_1 INT
    );""")
    for guild in client.guilds:
        for member in guild.members:
            if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
                cursor.execute(f"INSERT INTO users VALUES ('{member}', {member.id}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0"
                               f"0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)")
                connection.commit()
            else:
                pass
    connection.commit()
    print('–ë–æ—Ç –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–∏–ª—Å—è, —É—Ä–∞')


class Sell(disnake.ui.View):  # –∫–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ—Å–ª–µ –¥—Ä–æ–ø–∞ –ª–∏–±–æ –ø—Ä–æ–¥–∞—Ç—å –∫–∞—Ä—Ç—É, –ª–∏–±–æ –æ—Å—Ç–∞–≤–∏—Ç—å
    def __init__(self, cost, name, author, rarity):
        super().__init__(timeout=30.0)  # –∑–Ω–∞—á–∏—Ç —á—Ç–æ –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 20 —Å–µ–∫ –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å(–º–µ–Ω—å—à–µ –∑–∞—Ö–ª–æ–º–ª–µ–Ω–∏—è –±–æ—Ç–∞)
        self.value = Optional[bool]  # —Ö–∑ —á—Ç–æ —ç—Ç–æ
        self.cost = cost  # —Ü–µ–Ω–∞ –∫–∞—Ä—Ç—ã
        self.name = name  # –∏–º—è –∫–∞—Ä—Ç—ã (–±–µ–∑ .png)
        self.author = author  # –∞–≤—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è (–¥–ª—è –±–¥)
        self.rarity = rarity

    @disnake.ui.button(label="üí∏Sellüí∏", style=disnake.ButtonStyle.blurple)
    async def sell(self, button: disnake.ui.Button, inter: disnake.CommandInteraction):
        await inter.response.send_message(f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ –∫–∞—Ä—Ç–æ—á–∫—É {self.name}–ø–æ–∫–æ–ª–µ–Ω–∏–µ –∑–∞ {self.cost} :coin:")
        cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(self.cost, self.author))
        cursor.execute("UPDATE users SET mem_opened = mem_opened + {} WHERE id = {}".format(1, self.author))
        connection.commit()
        await inter.message.add_reaction("‚úÖ")
        self.value = True
        self.stop()

    @disnake.ui.button(label="üé¥Takeüé¥", style=disnake.ButtonStyle.green)
    async def take(self, button: disnake.ui.Button, inter: disnake.CommandInteraction):
        await inter.response.send_message(f"–ö–∞—Ä—Ç–æ—á–∫–∞ *{self.name}–ø–æ–∫–æ–ª–µ–Ω–∏–µ* –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å.")
        cursor.execute(f"UPDATE users SET {self.name} = {self.name} + {1} WHERE id = {self.author}")
        cursor.execute(f"UPDATE users SET {self.rarity[0]} = {self.rarity[0]} + {1} WHERE id = {self.author}")
        connection.commit()
        await inter.message.add_reaction("‚úÖ")
        self.value = False
        self.stop()


# –¢–£–¢ –ö–ê–†–û–ß–ï –¢–´ –î–û–õ–ñ–ï–ù –°–î–ï–õ–ê–¢–¨, –ß–¢–û–ë–´ –ü–†–û–ò–°–•–û–î–ò–õ–û –¢–û –ñ–ï –°–ê–ú–û–ï –ü–†–ò –î–†–£–ì–ò–• –†–ï–î–ö–û–°–¢–Ø–•, –ö–†–û–ú–ï common. –ò—Ö —Å–ø–∏—Å–æ–∫ –≤—ã—à–µ
# –ö–∞—Ä–æ—á–µ —Ç—É–ø–æ –∫–æ–ø–∏–ø–∞—Å—Ç–∞
def choise_card_for_drop(rarity):
    if rarity == "common":
        name = choice(common_cards)
        genre = int(name[-1])
        card = name + ".png"
        cost = 26
        for i in range(genre):
            cost -= 1
        return card, cost, name
    if rarity == "uncommon":
        name = choice(uncommon_cards)
        genre = int(name[-1])
        card = name + ".png"
        cost = 56
        for i in range(genre):
            cost -= 1
        return card, cost, name
    if rarity == "rare":
        name = choice(rare_cards)
        genre = int(name[-1])
        card = name + ".png"
        cost = 82
        for i in range(genre):
            cost -= 2
        return card, cost, name
    if rarity == "epic":
        name = choice(epic_cards)
        genre = int(name[-1])
        card = name + ".png"
        cost = 173
        for i in range(genre):
            cost -= 3
        return card, cost, name
    if rarity == "mythic":
        name = choice(mythic_cards)
        genre = int(name[-1])
        card = name + ".png"
        cost = 275
        for i in range(genre):
            cost -= 5
        return card, cost, name
    if rarity == "legendary":
        name = choice(legendary_cards)
        genre = int(name[-1])
        card = name + ".png"
        cost = 615
        for i in range(genre):
            cost -= 15
        return card, cost, name
    if rarity == "secret":
        name = choice(uncommon_cards)
        genre = int(name[-1])
        card = name + ".png"
        cost = 1330
        for i in range(genre):
            cost -= 30
        return card, cost, name
    if rarity == "80 coins":
        money = [80]
        return money
    if rarity == "125 coins":
        money = [125]
        return money
    if rarity == "200 coins":
        money = [200]
        return money
    if rarity == "260 coins":
        money = [260]
        return money
    if rarity == "404 coins":
        money = [404]
        return money


@client.event
async def on_member_join(member):  # –≤—Å–µ –∫—Ç–æ –∑–∞—à—ë–ª –Ω–∞ —Å–µ—Ä–≤–µ—Ä —Å –±–æ—Ç–æ–º –ø–æ–ø–∞–¥–∞—é—Ç –≤ –±–¥
    if cursor.execute(f"SELECT id FROM users WHERE id = {member.id}").fetchone() is None:
        cursor.execute(f"INSERT INTO users VALUES ('{member}', {member.id}, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)")
        connection.commit()

    else:
        pass


@client.command(aliases=["–¥—Ä–æ–ø", "drop", "–ø–æ–ª—É—á–∏—Ç—å"])
async def __drop(ctx):
    if f"{ctx.author}" in time_limits_per_drop:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –µ—Å—Ç—å –ª–∏ id —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Å–ª–æ–≤–∞—Ä–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –ø–æ
        time_left = time_limits_per_drop.get(f"{ctx.author}").replace(
            microsecond=0) - datetime.datetime.now().replace(microsecond=0)  # —É–±–∏—Ä–∞–Ω–∏–µ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –∏–∑ —Å—á—ë—Ç—á–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏(–¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã)
        if time_left < datetime.timedelta(0):  # –µ—Å–ª–∏ –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–º–º–∞–Ω–¥—ã –∫–æ–Ω—á–∏–ª–æ—Å—å
            del time_limits_per_drop[f"{ctx.author}"]  # —Ç–æ —á–µ–ª–∏–∫ —É–±–∏—Ä–∞–µ—Ç—Å—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è

    if f"{ctx.author}" not in time_limits_per_drop: # –µ—Å–ª–∏ –∞–≤—Ç–æ—Ä–∞ –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ
        rarity = random.choices(drop_list, weights=drop_chances, k=1)  # –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –¥—Ä–æ–ø –∏–∑ –ª–∏—Å—Ç–∞ —Ç–æ–≥–æ, —á—Ç–æ –º–æ–∂–µ—Ç –≤—ã–ø–∞—Å—Ç—å
        print(rarity)
        drop = choise_card_for_drop(*rarity)  # –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –≤—ã–ø–∞–ª–æ –≤ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—ã–ª–∞ –≤—ã—à–µ
        print(drop)
        if len(drop) == 1:
            await ctx.send(f"{ctx.author}, **–ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º**, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ **{drop[0]}** :coin: –º–æ–Ω–µ—Ç!,")
            cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(drop[0], ctx.author.id))

        else:
            cost = drop[1]  # –∏—Ç–æ–≥–æ–≤–æ–∞—è —Ü–µ–Ω–∞ –∫–∞—Ä—Ç—ã
            name = drop[2]  # –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã (–±–µ–∑ ".png").  –í drop[0] –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã —Å ".png"
            await ctx.send(
                f"{ctx.author}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ **{', '.join(rarity)}** –∫–∞—Ä—Ç–æ—á–∫—É,"
                f" –ø–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!", file=disnake.File(f"./cards/{', '.join(rarity)}/{drop[0]}")) # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ
            # –∫–∞—Ä—Ç–æ—á–∫–µ, –∫–æ—Ç–æ—Ä–∞—è –∏—â–µ—Ç—Å—è –≤ –ø–∞–ø–∫–µ cards/(–Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–¥–∫–æ—Å—Ç–∏)/(–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã)
            sell_or_take = Sell(cost, name, ctx.author.id, rarity)  # —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –∫–ª–∞—Å—Å–∞ Sell, –∫–æ—Ç–æ—Ä—ã–π –±—ã–ª –≤—ã—à–µ.
            await ctx.send(
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å **{name}** –∏–ª–∏ –ø—Ä–æ–¥–∞—Ç—å **{name}** —É–∑–±–µ–∫–∞–º –∑–∞ **{cost}** :coin:?",
                view=sell_or_take)  # view=sell_or_take - —ç—Ç–æ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏–µ–º

        time_limits_per_drop[f"{ctx.author}"] = \
            datetime.datetime.now() + datetime.timedelta(minutes=4)  # minutes-—ç—Ç–æ —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥ –¥—Ä–æ–ø–æ–º
    else:
        await ctx.send(f"{ctx.author}, –≤—ã —Å–º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä–æ–ø —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ {time_left}")
    connection.commit()


# –ü–†–û–°–¢–û –ö–û–ú–ú–ê–ù–î–ê –†–ê–ë–û–¢–ê–¢–¨, –¢–´ –î–û–õ–ñ–ï–ù –ü–û–ú–ù–ò–¢–¨
@client.command(aliases=["—Ä–∞–±–æ—Ç–∞—Ç—å", "work", "–∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å"])
async def __working(ctx):
    income = choice(work_incom)
    cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(income, ctx.author.id))
    connection.commit()
    await ctx.send(f"**{ctx.author}**, –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {income} **–º–æ–Ω–µ—Ç–æ–∫** :coin:")
    await ctx.message.add_reaction("‚úÖ")
    connection.commit()


# –° –ü–û–ú–û–©–¨–Æ –≠–¢–û–ô –ö–û–ú–ê–ù–î–´ –ú–û–ñ–ù–û –°–ú–û–¢–†–ï–¢–¨ –ë–ê–õ–ê–ù–° –î–†–£–ì–ò–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô (–¢–û–õ–¨–ö–û –ê–î–ú–ò–ù–´ –¢–ê–ö –ú–û–ì–£–¢)
@client.command(aliases = ["admin_balance", "seebalance", "see_balance", "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å_–±–∞–ª–∞–Ω—Å"])
@commands.has_permissions(administrator=True)
async def __balance(ctx, member: disnake.Member = None):
    if member is None:
        member = ctx.author
    cash = cursor.execute(f'SELECT cash FROM users WHERE id = {member.id}').fetchone()[0]
    await ctx.send(embed=disnake.Embed(description=f'–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è *{member.name}* —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç **{cash} –º–µ–º–æ–∫–æ–∏–Ω–æ–≤ :coin:  ** (__—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç —Å–º–æ—Ç—Ä–µ—Ç—å —á—É–∂–æ–π –±–∞–ª–∞–Ω—Å__)'))


# –ü–†–û–°–¢–û –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–ê –î–õ–Ø –í–´–î–ê–ß–ò –ú–û–ù–ï–¢–û–ö
@client.command(aliases = ["award", "give", "–≤—ã–¥–∞—Ç—å", "donate", "–Ω–∞–≥—Ä–∞–¥–∏—Ç—å", "–¥–∞—Ç—å"])
@commands.has_permissions(administrator=True)
async def __award(ctx, member: disnake.Member = None, amount: int = None):
    if member is None:
        await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –º–µ–º–æ–∫–æ–∏–Ω—ã")
    else:
        if amount is None:
            await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –º–µ–º–æ–∫–æ–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å —á–µ–ª–æ–≤–µ–∫—É :coin: ")
        elif int(amount) < 1:
            await ctx.send(f"**{ctx.author}**, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–¥–∞–≤–∞–µ–º—ã—Ö –º–µ–º–æ–∫–æ–∏–Ω–æ–≤ - **1** :coin: ")
        else:
            cursor.execute("UPDATE users SET cash = cash + {} WHERE id = {}".format(int(amount), member.id))
            connection.commit()
            await ctx.message.add_reaction("‚úÖ")
            await ctx.send(f"–°—É–º–º–∞ **{amount}** –º–µ–º–æ–∫–æ–∏–Ω–æ–≤ –±—ã–ª–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Å—á—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è :coin:")


# –ü–†–û–°–¢–û –ê–î–ú–ò–ù –ö–û–ú–ê–ù–î–ê –î–õ–Ø –ó–ê–ë–ò–†–ê–ù–ò–Ø –ú–û–ù–ï–¢–û–ö
@client.command(aliases=["take", "–∑–∞–±—Ä–∞—Ç—å"])
@commands.has_permissions(administrator=True)
async def __take(ctx, member: disnake.Member = None, amount=None):
    if member is None:
        await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å–ø–µ—Ä–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑—ä—è—Ç—å –º–µ–º–æ–∫–æ–∏–Ω—ã")
    else:
        if amount is None:
            await ctx.send(f"**{ctx.author}**, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É –º–µ–º–æ–∫–æ–∏–Ω–æ–≤, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∏–∑—ä—è—Ç—å :coin: ")
        elif amount == "all":
            cursor.execute("UPDATE users SET cash = {} WHERE id = {}".format(0, member.id))
            connection.commit()
            await ctx.message.add_reaction("‚úÖ")
        elif int(amount) < 1:
            await ctx.send(f"**{ctx.author}**, –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –∑–∞–±–∏—Ä–∞–µ–º—ã—Ö –º–µ–º–æ–∫–æ–∏–Ω–æ–≤ - **1** :coin: ")
        else:
            cursor.execute("UPDATE users SET cash = cash - {} WHERE id = {}".format(int(amount), member.id))
            connection.commit()
            await ctx.message.add_reaction("‚úÖ")
            await ctx.send(f"–°—É–º–º–∞ **{amount}** –º–µ–º–æ–∫–æ–∏–Ω–æ–≤ –±—ã–ª–∞ –∏–∑—ä—è–Ω–∞ —Å–æ —Å—á–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è :coin:")


# –≠–¢–û –ë–ï–°–ü–û–õ–ï–ó–ù–û, –ü–û–ö–ê –ß–¢–û –ó–ê–ë–ï–ô

@client.command(aliases=[
    "–∫—É–ø–∏—Ç—å_—è—â–∏–∫","–∫—É–ø–∏—Ç—å_–∫–µ–π—Å", "buycrate", "buy", "–∫–µ–π—Å", "–∫–µ–π—Å—ã", "crate", "crates", "box", "–±–æ–∫—Å", "–∫—É–ø–∏—Ç—å", "—Ü–µ–Ω–∞"
])
async def __buy_crate(ctx):
    await ctx.send(
        f"**{ctx.author}**, –≤—ã –∂–µ–ª–∞–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –º–µ–º–æ–∫–µ–π—Å –∑–∞ **50** –º–µ–º–æ–∫–æ–∏–Ω–æ–≤? :coin: **–ù–∞–ø–∏—à–∏—Ç–µ** __'!!–æ—Ç–∫—Ä—ã—Ç—å'__ .")




#–ü–†–û–°–¢–û –ü–†–ò–°–´–õ–ê–ï–¢ –î–†–û–ü. –®–ê–ù–°–´
@client.command(aliases=[
    "–¥—Ä–æ–ø–∏–Ω—Ñ–æ", "–¥—Ä–æ–ø—à–∞–Ω—Å—ã", "dropchances", "–î—Ä–æ–ø—à–∞–Ω—Å—ã", "–î—Ä–æ–ø–∏–Ω—Ñ–æ", "–î—Ä–æ–ø–ò–Ω—Ñ–æ", "chances", "—à–∞–Ω—Å—ã"
])
async def __see_drop_chances(ctx):
    await ctx.send(embed=disnake.Embed(
        description=f"–î—Ä–æ–ø –Ω–∏—á–µ–≥–æ –Ω–µ —Å—Ç–æ–∏—Ç, –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è –ø–æ –∫–æ–º–º–∞–Ω–¥–µ !!drop."
                    f" \n :coin: **–ù–∞–ø–∏—à–∏—Ç–µ** *'!!–¥—Ä–æ–ø'* , —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É.·Ö† ·Ö†·Ö† ·Ö†"
                    f"\n *–®–∞–Ω—Å –Ω–∞ –æ–±—ã—á–Ω—É—é –∫–∞—Ä—Ç—É* - **50%**. \n  *–®–∞–Ω—Å –Ω–∞ –Ω–µ–æ–±—ã—á–Ω—É—é –∫–∞—Ä—Ç—É* - **19%**. \n "
                    f"*–®–∞–Ω—Å –Ω–∞ —Ä–µ–¥–∫—É—é –∫–∞—Ä—Ç—É* - **12%** \n *–®–∞–Ω—Å –Ω–∞ —ç–ø–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É* - **6%**."
                    f"\n *–®–∞–Ω—Å –Ω–∞ –º–∏—Ñ–∏—á–µ—Å–∫—É—é –∫–∞—Ä—Ç—É* - **2.5%**. \n *–®–∞–Ω—Å –Ω–∞ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—É—é –∫–∞—Ä—Ç—É* - **0.7%**"
                    f"\n *–®–∞–Ω—Å –Ω–∞ —Å–µ–∫—Ä–µ—Ç–Ω—É—é –∫–∞—Ä—Ç—É* - **0.3%**. \n *–®–∞–Ω—Å –Ω–∞ —Ä–∞–∑–Ω–æ–µ –∫–æ–ª-–≤–æ –º–µ–º–æ–∫–æ–∏–Ω–æ–≤* - **9.5%**"))


# –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ (–Ω–µ —Å–¥–µ–ª–∞–ª)
@client.command(aliases=[
    "cards", "inventory", "–∫–∞—Ä—Ç—ã", "–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å", "–º–æ–∏", "–º–æ–π", "my"
])
async def __inventory(ctx):
    records = cursor.execute(f"""SELECT * from users WHERE id = {ctx.author.id}""").fetchall()
    counter = 0
    profile = []
    print(records)
    for i in records:
        for row in i:
            counter += 1
            if counter >= 6:
                profile.append(row)
    cards = []
    counter2 = 0
    for i in all_cards:
        cards.append(f"{i} : {profile[counter2]}")
        counter2 += 1
    await ctx.send(embed=disnake.Embed(
        description=f" **--–ò–ù–í–ï–ù–¢–ê–†–¨--** \n"
                    f"{*cards,}"))


@client.command(aliases=[
    "–ø—Ä–æ—Ñ–∏–ª—å", "–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å", "profile", "menu", "–º–µ–Ω—é" 'balance', '–±–∞–ª–∞–Ω—Å', 'cash',
    '–∫–µ—à', "–º–∞–Ω–∏", "–¥–µ–Ω—å–≥–∏", "coins", "money", "memcoins"
])
async def __info(ctx):
    opened = cursor.execute(f'SELECT mem_opened FROM users WHERE id = {ctx.author.id}').fetchone()[0]
    cash = cursor.execute(f'SELECT cash FROM users WHERE id = {ctx.author.id}').fetchone()[0]
    commons = cursor.execute(f"SELECT common FROM users WHERE id = {ctx.author.id}").fetchone()[0]
    uncommons = cursor.execute(f"SELECT uncommon FROM users WHERE id = {ctx.author.id}").fetchone()[0]
    rares = cursor.execute(f"SELECT rare FROM users WHERE id = {ctx.author.id}").fetchone()[0]
    epics = cursor.execute(f"SELECT epic FROM users WHERE id = {ctx.author.id}").fetchone()[0]
    mythics = cursor.execute(f"SELECT mythic FROM users WHERE id = {ctx.author.id}").fetchone()[0]
    secrets = cursor.execute(f"SELECT secret FROM users WHERE id = {ctx.author.id}").fetchone()[0]
    legendarys = cursor.execute(f"SELECT legendary FROM users WHERE id = {ctx.author.id}").fetchone()[0]
    await ctx.send(embed=disnake.Embed(
        description=f" **--–ü–†–û–§–ò–õ–¨--**"
                    f"\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç  **{cash} –º–µ–º–æ–∫–æ–∏–Ω–æ–≤ :coin:  **·Ö† ·Ö† ·Ö† ·Ö†·Ö† ·Ö† ·Ö† ·Ö†·Ö†   ·Ö† ·Ö† "
                    f"–ü–æ–ª—É—á–µ–Ω–æ –∫–∞—Ä—Ç: **{opened}**."
                    f"\n –ü–æ–ª—É—á–µ–Ω–æ –æ–±—ã—á–Ω—ã—Ö –∫–∞—Ä—Ç: **{commons}**"
                    f"\n –ü–æ–ª—É—á–µ–Ω–æ –Ω–µ–æ–±—ã—á–Ω—ã—Ö –∫–∞—Ä—Ç: **{uncommons}**"
                    f"\n –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–¥–∫–∏—Ö –∫–∞—Ä—Ç: **{rares}**"
                    f"\n –ü–æ–ª—É—á–µ–Ω–æ —ç–ø–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç: **{epics}**"
                    f"\n –ü–æ–ª—É—á–µ–Ω–æ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç: **{mythics}**"
                    f"\n –ü–æ–ª—É—á–µ–Ω–æ –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∫–∞—Ä—Ç: **{legendarys}**"
                    f"\n –ü–æ–ª—É—á–µ–Ω–æ —Å–µ–∫—Ä–µ—Ç–Ω—ã—Ö –∫–∞—Ä—Ç: **{secrets}**"))


@client.command(aliases=[
    "–∫–æ–º–º–∞–Ω–¥—ã", "commands", "command", "—Ñ—É–Ω–∫—Ü–∏–∏", "–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏", "–∏–Ω—Ñ–æ", "–ø–æ–º–æ—â—å", "help"
])
async def __commands(ctx):
    await ctx.send(embed=disnake.Embed(
        description=f"*–ö–æ–º–º–∞–Ω–¥—ã:* \n **!!(–¥—Ä–æ–ø–∏–Ω—Ñ–æ/—à–∞–Ω—Å—ã)**,  **!!(–ø—Ä–æ—Ñ–∏–ª—å/–±–∞–ª–∞–Ω—Å/–º–µ–Ω—é)**,  **!!(—Ä–∞–±–æ—Ç–∞—Ç—å/work)**, "
                    f" \n**!!(–¥—Ä–æ–ø/drop)**,  **!!(–∫–∞—Ä—Ç—ã/–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å)**"))
client.run("OTcxNzczOTU2NjYxMDc2MDI4.GBFUWv.U4UJzDj-nQ0ka57jo_AxWpSHcZD3yG1CU0Ple4")
